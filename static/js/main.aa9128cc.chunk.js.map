{"version":3,"sources":["components/basic/Icons/Icon.tsx","store/app/actions.ts","common/interfaces.ts","components/side/City/City.tsx","components/side/СitiesListPlaceholder/СitiesListPlaceholder.tsx","components/side/CitiesList/CitiesList.tsx","components/side/Tip/Tip.tsx","components/basic/Button/Button.tsx","components/basic/Input/Input.tsx","common/constants.ts","common/citiesValidation.ts","components/side/CityInput/CityInput.tsx","components/side/MainPanel/MainPanel.tsx","components/side/TopPanel/TopPanel.tsx","App.tsx","store/app/reducers.ts","store/reducers.ts","index.tsx"],"names":["Icons","CITY_ACTION","React","memo","type","Collapse","className","enableBackground","id","version","viewBox","fill","points","stroke","strokeMiterlimit","strokeWidth","Done","xmlns","width","height","d","Restart","MessageType","cityInputTextChange","text","CITY_INPUT_TEXT_CHANGE","payload","setTip","message","SET_TIP","City","num","name","isOpened","useState","cityInfo","setCityInfo","dispatch","useDispatch","useEffect","wikiURL","fetch","then","response","json","data","str","query","search","shift","snippet","result","DOMParser","parseFromString","firstChild","onClick","key","SET_OPENED_CITY","textContent","СitiesListPlaceholder","CitiesList","useSelector","app","resultCities","openedCity","window","scrollTo","document","body","scrollHeight","length","TransitionGroup","map","city","index","CSSTransition","timeout","classNames","computedClass","Error","children","disabled","Input","value","placeholder","onChange","MESSAGES","CITY_ISNT_EXISTS","CITY_IS_IN_THE_LIST","CITY_ISNT_VALID","CitiesValidation","EXCEPTIONS","findCity","playerCity","cities","filter","toLowerCase","trim","searchResult","includes","checkAnswer","answer","getAnswer","Success","getTip","lastCity","slice","firstLetter","lastLetter","citiesOptions","getRandomInt","toUpperCase","min","max","Math","floor","random","CityInput","state","cityInput","handleSubmit","useCallback","e","preventDefault","SET_CITIES","setCities","handleRestartClick","CLEAR_CITIES","handleTextChange","target","onSubmit","MainPanel","tip","TopPanel","App","initialState","require","Empty","combineReducers","action","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","thunkMiddleware","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.aa9128cc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport enum Icons {\r\n    Collapse = 'collapse',\r\n    Done = 'done',\r\n    Restart = 'restart'\r\n}\r\ninterface IIcon {\r\n    type: Icons;\r\n}\r\n\r\nconst Icon: React.FC<IIcon> = ({ type }) => <>\r\n    {\r\n        type === Icons.Collapse && <svg\r\n                className='collapce-icon'\r\n                enableBackground='new 0 0 24 24'\r\n                id='Layer_1'\r\n                version='1.0'\r\n                viewBox='0 0 24 24'\r\n        >\r\n            <polyline\r\n                fill='none'\r\n                points='3,15.5 12,6.5 21,15.5'\r\n                stroke='#000000'\r\n                strokeMiterlimit='10'\r\n                strokeWidth='2'\r\n            />\r\n        </svg>\r\n    }\r\n    {\r\n        type === Icons.Done && <svg\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            width='24'\r\n            height='24'\r\n            viewBox='0 0 24 24'\r\n        >\r\n            <path\r\n                fill='none'\r\n                d='M0 0h24v24H0z'\r\n            />\r\n            <path\r\n                d='M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z'\r\n            />\r\n        </svg>\r\n    }\r\n    {\r\n        type === Icons.Restart && <svg\r\n            xmlns='http://www.w3.org/2000/svg'\r\n            width='24'\r\n            height='24'\r\n            viewBox='0 0 24 24'\r\n        >\r\n            <path\r\n                d='M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c\r\n                -.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z'\r\n            />\r\n            <path\r\n                d='M0 0h24v24H0z'\r\n                fill='none'\r\n            />\r\n        </svg>\r\n    }\r\n</>\r\n\r\nexport default React.memo(Icon);\r\n","import { IAction } from \"../../common/interfaces\";\r\n\r\nexport enum CITY_ACTION {\r\n    CITY_INPUT_TEXT_CHANGE = 'CITY_INPUT_TEXT_CHANGE',\r\n    SET_CITIES = 'SET_CITIES',\r\n    SET_OPENED_CITY = 'SET_OPENED_CITY',\r\n    CLEAR_CITIES = 'CLEAR_CITIES',\r\n    SET_TIP = 'SET_TIP'\r\n}\r\n\r\nexport const cityInputTextChange = (text: string): IAction => ({\r\n    type: CITY_ACTION.CITY_INPUT_TEXT_CHANGE,\r\n    payload: text\r\n});\r\n\r\nexport const setCities = (cities: string[] | undefined): IAction => ({\r\n    type: CITY_ACTION.SET_CITIES,\r\n    payload: cities\r\n});\r\n\r\nexport const setOpenedCity = (key: null | number): IAction => ({\r\n    type: CITY_ACTION.SET_OPENED_CITY,\r\n    payload: key\r\n});\r\n\r\nexport const clearCities = (): IAction => ({\r\n    type: CITY_ACTION.CLEAR_CITIES\r\n});\r\n\r\nexport const setTip = (message: string | object): IAction => ({\r\n    type: CITY_ACTION.SET_TIP,\r\n    payload: message\r\n});","import { CITY_ACTION } from \"../store/app/actions\";\r\n\r\nexport enum MessageType {\r\n    Success,\r\n    Error,\r\n    Empty\r\n};\r\n\r\nexport interface ICity {\r\n    region: string;\r\n    city: string;\r\n}\r\n\r\nexport interface IMessage {\r\n    type: MessageType;\r\n    text: string;\r\n};\r\n\r\nexport interface IAction {\r\n    type: CITY_ACTION;\r\n    payload?: any;\r\n}\r\n\r\nexport interface IFindCityResult {\r\n    resultCities?: string[];\r\n    message: string | object;\r\n} ","import React, { useState, useEffect } from 'react';\r\nimport Icon, { Icons } from '../../basic/Icons/Icon';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { setOpenedCity } from '../../../store/app/actions';\r\n\r\nimport './City.scss';\r\n\r\ninterface ICity {\r\n\tnum: number;\r\n\tname: string;\r\n\tisOpened: boolean;\r\n}\r\n\r\nconst getWikiURL = (cityName: string) => {\r\n\treturn (\r\n\t\t`https://ru.wikipedia.org/w/api.php?action=query&list=\r\n\t\tsearch&prop=info&inprop=url&utf8=&format=json&origin=\r\n\t\t*&srlimit=20&srsearch=${cityName}`\r\n\t)\r\n}\r\n\r\nconst City: React.FC<ICity> = ({ num, name, isOpened }) => {\r\n\tconst [cityInfo, setCityInfo] = useState();\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleCollapseClick = () =>  dispatch(setOpenedCity(isOpened === true ? null : num));\r\n\r\n\tuseEffect(() => {\r\n\t\tconst wikiURL = getWikiURL(name);\r\n\t\tfetch(wikiURL)\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(data => {\r\n\t\t\t\tconst str = `<span>${data.query.search.shift().snippet}</span>`;\r\n\t\t\t\tconst result: any = new DOMParser().parseFromString(str, \"text/xml\").firstChild;\r\n\r\n\t\t\t\tsetCityInfo(result);\r\n\t\t\t});\r\n\t}, [name])\r\n\r\n\treturn (\r\n\t\t<article className={`city-item${isOpened ? ' is-expanded' : ''}`}>\r\n\t\t\t<section className=\"city-item__top-panel\">\r\n\t\t\t\t<span className=\"city-item__city-name\">\r\n\t\t\t\t\t{`${num}. ${name}`}\r\n\t\t\t\t</span>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName={`city-item__open-info-button${isOpened ? ' is-expanded-icon' : ''}`}\r\n\t\t\t\t\tonClick={handleCollapseClick}\r\n\t\t\t\t>\r\n\t\t\t\t\t<Icon type={Icons.Collapse}/>\r\n\t\t\t\t</button>\r\n\t\t\t</section>\r\n\t\t\t{\r\n\t\t\t\t(isOpened && cityInfo) && <section className=\"city-item__info-panel\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t`${cityInfo.textContent}`\r\n\t\t\t\t\t}\r\n\t\t\t\t</section>\r\n\t\t\t}\r\n\t\t</article>\r\n\t)\r\n}\r\n\r\nexport default City;\r\n","import React from 'react';\r\n\r\nimport './СitiesListPlaceholder.scss';\r\n\r\nconst СitiesListPlaceholder: React.FC = () => (\r\n    <section className=\"cities-list__placeholder\">\r\n        <section className=\"cities-list__placeholder__header\">\r\n            <h2>Список городов пуст.</h2>\r\n        </section>\r\n        <section className=\"cities-list__placeholder__secondary-info\">\r\n            <h3>Введите в поле любой существующий город России, чтобы начать игру.</h3>\r\n        </section>\r\n    </section>\r\n)\r\n\r\nexport default СitiesListPlaceholder;","import React, { useEffect } from 'react';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport City from '../City/City';\r\nimport CitiesListPlaceholder from '../СitiesListPlaceholder/СitiesListPlaceholder';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './CitiesList.scss';\r\n\r\nconst CitiesList: React.FC = () => {\r\n\tconst { resultCities, openedCity } = useSelector(({ app }: any) => app);\r\n\r\n\tuseEffect(() => {\r\n\t\twindow.scrollTo(0, document.body.scrollHeight);\r\n\t}, [resultCities.length]);\r\n\r\n\treturn <>\r\n\t\t{\r\n\t\t\tresultCities.length ? <ul className=\"cities-list\">\r\n\t\t\t\t<TransitionGroup>\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tresultCities.map((city: string, index: number) => <CSSTransition\r\n\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\ttimeout={300}\r\n\t\t\t\t\t\t\tclassNames=\"cities-list-item__fade\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<City\r\n\t\t\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\t\t\tnum={index + 1}\r\n\t\t\t\t\t\t\t\tname={city}\r\n\t\t\t\t\t\t\t\tisOpened={!!(openedCity === index + 1)}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</CSSTransition>)\r\n\t\t\t\t\t}\r\n\t\t\t\t</TransitionGroup>\r\n\t\t\t</ul> : <CitiesListPlaceholder />\r\n\t\t}\r\n\t</>\r\n}\r\n\r\nexport default CitiesList;\r\n","import React from 'react';\r\nimport { IMessage, MessageType } from '../../../common/interfaces';\r\n\r\nimport './Tip.scss';\r\n\r\ninterface ITip {\r\n    message: IMessage;\r\n}\r\n\r\nconst Tip: React.FC<ITip> = ({ message }) => {\r\n    const { type, text } = message;\r\n    const computedClass = `tip-text ${(type === MessageType.Error && 'error-type')}`;\r\n\r\n    return (\r\n        <h1 className={computedClass}>\r\n            {text}\r\n        </h1>\r\n    )\r\n}\r\n\r\nexport default React.memo(Tip);","import React from 'react';\r\n\r\nimport './Button.scss';\r\n\r\ninterface IButton {\r\n    children?: any;\r\n    type?: \"button\" | \"submit\" | \"reset\" | undefined;\r\n    disabled?: boolean;\r\n    onClick?:  any;\r\n}\r\n  \r\nconst Button: React.FC<IButton> = ({children, type, disabled, onClick}) => (\r\n    <button\r\n        className=\"simple-button\"\r\n        type={type}\r\n        disabled={disabled}\r\n        onClick={onClick}\r\n    >\r\n        {children}\r\n    </button>\r\n)\r\n\r\nexport default React.memo(Button);\r\n","import React from 'react';\r\n\r\nimport './Input.scss';\r\n\r\ninterface IInput {\r\n    value?: string;\r\n    placeholder?: string;\r\n    disabled?: boolean;\r\n    onChange?: any;\r\n}\r\n\r\nconst Input: React.FC<IInput> = ({ value, placeholder, disabled, onChange }) => <input\r\n    className=\"simple-input\"\r\n    type=\"text\"\r\n    value={value}\r\n    placeholder={placeholder}\r\n    disabled={disabled}\r\n    onChange={onChange}\r\n/>\r\n\r\nexport default Input;\r\n","import { MessageType } from \"./interfaces\";\r\n\r\nexport const MESSAGES = {\r\n    CITY_ISNT_EXISTS: {\r\n        type: MessageType.Error,\r\n        text: \"Такого города не было найдено!\"\r\n    },\r\n    CITY_IS_IN_THE_LIST: {\r\n        type: MessageType.Error,\r\n        text: \"Такой город был уже угадан!\"\r\n    },\r\n    CITY_ISNT_VALID: {\r\n        type: MessageType.Error,\r\n        text: \"Необходимо загадывать город начиная с указанной буквы!\"\r\n    }\r\n}","import { ICity, IFindCityResult, MessageType } from \"./interfaces\";\r\nimport { MESSAGES } from './constants';\r\n\r\nexport default class CitiesValidation {\r\n    private static EXCEPTIONS: string[] = [\r\n        'й', 'ь', 'ы', 'ъ'\r\n    ]\r\n\r\n    static findCity = (playerCity: string, cities: ICity[], resultCities: string[]): IFindCityResult => {\r\n        const [searchResult]: ICity[] = cities.filter(({ city }: ICity ) => {\r\n            return city.toLowerCase().trim() === playerCity.toLowerCase().trim();\r\n        });\r\n\r\n        if (!searchResult) {\r\n            return {\r\n                message: MESSAGES.CITY_ISNT_EXISTS\r\n            };\r\n        }\r\n\r\n        const { city } = searchResult;\r\n\r\n        if (resultCities.includes(city)) {\r\n            return {\r\n                message: MESSAGES.CITY_IS_IN_THE_LIST\r\n            };\r\n        }\r\n\r\n        if (resultCities.length) {\r\n            if (CitiesValidation.checkAnswer(city, resultCities) === false) {\r\n                return {\r\n                    message: MESSAGES.CITY_ISNT_VALID\r\n                };\r\n            }\r\n        }\r\n\r\n        const answer = CitiesValidation.getAnswer(city, cities, resultCities);\r\n\r\n        const foundCities: IFindCityResult = {\r\n            resultCities: [\r\n                ...resultCities,\r\n                city,\r\n                answer\r\n            ],\r\n            message: {\r\n                type: MessageType.Success,\r\n                text: CitiesValidation.getTip(answer)\r\n            }\r\n        }\r\n\r\n        return foundCities;\r\n    }\r\n\r\n    static checkAnswer = (city: string, resultCities: string[]): boolean => {\r\n        const lastCity = `${resultCities.slice(-1)}`;\r\n\r\n        const shift = (CitiesValidation.EXCEPTIONS.includes(`${lastCity.slice(-1)}`)) ? 2 : 1;\r\n\r\n        const [firstLetter] = city.toLowerCase();\r\n        const [lastLetter] = lastCity.slice(-shift).toLowerCase();\r\n\r\n        return firstLetter === lastLetter;\r\n    }\r\n\r\n    static getAnswer = (city: string, cities: ICity[], resultCities: string[]) => {\r\n        const shift = (CitiesValidation.EXCEPTIONS.includes(`${city.slice(-1)}`)) ? 2 : 1;\r\n        const [lastLetter] = city.slice(-shift).toLowerCase();\r\n\r\n        const citiesOptions: ICity[] = cities.filter(({ city }: ICity) => {\r\n            const [firstLetter] = city.toLowerCase();\r\n            \r\n            return firstLetter === lastLetter;\r\n        });\r\n\r\n        while (true) {\r\n            const { city }: ICity = citiesOptions[CitiesValidation.getRandomInt(0, citiesOptions.length)];\r\n            if (!resultCities.includes(city)) {\r\n                return city;\r\n            }\r\n        }\r\n    }\r\n\r\n    static getTip = (city: string): string => {\r\n        const shift = (CitiesValidation.EXCEPTIONS.includes(`${city.slice(-1)}`)) ? 2 : 1;\r\n        return city[city.length - shift].toUpperCase();\r\n    }\r\n\r\n    static getRandomInt = (min: number, max: number) => {\r\n        return Math.floor(Math.random() * (max - min)) + min;\r\n    }\r\n}","import React, { useCallback, FormEvent } from 'react';\r\nimport Button from '../../basic/Button/Button';\r\nimport Icon, { Icons } from '../../basic/Icons/Icon';\r\nimport Input from '../../basic/Input/Input';\r\nimport { IFindCityResult, MessageType } from '../../../common/interfaces';\r\nimport CitiesValidation from '../../../common/citiesValidation';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { cityInputTextChange, setCities, setTip, clearCities } from '../../../store/app/actions';\r\n\r\nimport './CityInput.scss';\r\n\r\nconst CityInput: React.FC = () => {\r\n\tconst dispatch = useDispatch();\r\n\tconst { cityInput, cities, resultCities } = useSelector((state: any) => state.app);\r\n\r\n\tconst handleSubmit = useCallback((e: FormEvent) => {\r\n\t\te.preventDefault();\r\n\r\n\t\tconst playerCity = cityInput;\r\n\t\tif (playerCity === '') {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst result: any = CitiesValidation.findCity(playerCity, cities, resultCities);\r\n\t\tconst isSuccessCity: boolean = result.message.type === MessageType.Success;\r\n\r\n\t\tif (isSuccessCity) {\r\n\t\t\tconst { resultCities, message }: IFindCityResult = result;\r\n\t\t\tdispatch(setCities(resultCities));\r\n\t\t\tdispatch(setTip(message));\r\n\t\t} else {\r\n\t\t\tconst { message } = result;\r\n\t\t\tdispatch(setTip(message));\r\n\t\t}\r\n\r\n\t\tdispatch(cityInputTextChange(''));\r\n\t}, [cities, cityInput, dispatch, resultCities]);\r\n\r\n\tconst handleRestartClick = useCallback(() => {\r\n\t\tdispatch(setTip(''));\r\n\t\tdispatch(clearCities());\r\n\t\tdispatch(cityInputTextChange(''));\r\n\t}, [dispatch]);\r\n\r\n\tconst handleTextChange = useCallback(({ target }) => {\r\n\t\tdispatch(cityInputTextChange(target.value));\r\n\t}, [dispatch]);\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tclassName=\"city-input-container\"\r\n\t\t\tonSubmit={handleSubmit}\r\n\t\t>\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"button\"\r\n\t\t\t\tdisabled={!resultCities.length}\r\n\t\t\t\tonClick={handleRestartClick}\r\n\t\t\t>\r\n\t\t\t\t<Icon type={Icons.Restart} />\r\n\t\t\t</Button>\r\n\t\t\t<Input\r\n\t\t\t\tvalue={cityInput}\r\n\t\t\t\tplaceholder={\"Введите свой город здесь...\"}\r\n\t\t\t\tonChange={handleTextChange}\r\n\t\t\t/>\r\n\t\t\t<Button\r\n\t\t\t\ttype=\"submit\"\r\n\t\t\t\tdisabled={!cityInput}\r\n\t\t\t>\r\n\t\t\t\t<Icon type={Icons.Done} />\r\n\t\t\t</Button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default CityInput;\r\n","import React from 'react';\r\nimport CitiesList from '../CitiesList/CitiesList';\r\nimport Tip from '../Tip/Tip';\r\nimport CityInput from '../CityInput/CityInput';\r\n\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './MainPanel.scss';\r\n\r\nconst MainPanel: React.FC = () => {\r\n    const { tip } = useSelector((state: any) => state.app); \r\n\r\n    return (\r\n        <main className=\"main-panel\">\r\n            {/* TODO: Help button */}\r\n            <CitiesList/>\r\n            {\r\n                tip && <Tip message={tip}/>\r\n            }\r\n            <CityInput/>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default MainPanel;\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport './TopPanel.scss';\r\n\r\nconst TopPanel: React.FC = () => <nav className=\"top-panel\">\r\n    <header className=\"top-panel__project-name\">Cities</header>\r\n</nav>\r\n\r\nexport default TopPanel;\r\n","import React from 'react';\r\nimport MainPanel from './components/side/MainPanel/MainPanel';\r\nimport TopPanel from './components/side/TopPanel/TopPanel';\r\n\r\nimport './App.css'\r\n\r\nconst App: React.FC = () => (\r\n\t<>\r\n\t\t<TopPanel/>\r\n\t\t<MainPanel/>\r\n\t</>\r\n)\r\n\r\nexport default App;\r\n","import { IAction, ICity, IMessage, MessageType } from \"../../common/interfaces\";\r\nimport { CITY_ACTION } from \"./actions\";\r\n\r\ninterface IInitialState {\r\n    cities: ICity[];\r\n    resultCities: string[];\r\n    cityInput: string;\r\n    tip: IMessage;\r\n    openedCity?: number\r\n}\r\n\r\nconst initialState: IInitialState = {\r\n    cities: require('../../data/RU.json'),\r\n    resultCities: [],\r\n    tip: {\r\n        type: MessageType.Empty,\r\n        text: ''\r\n    },\r\n    cityInput: ''\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: IAction) => {\r\n    switch (action.type) {\r\n        case CITY_ACTION.CITY_INPUT_TEXT_CHANGE: {\r\n            return {\r\n                ...state,\r\n                cityInput: action.payload\r\n            }\r\n        }\r\n        case CITY_ACTION.SET_CITIES: {\r\n            return {\r\n                ...state,\r\n                resultCities: [...action.payload]\r\n            }\r\n        }\r\n        case CITY_ACTION.CLEAR_CITIES: {\r\n            return {\r\n                ...state,\r\n                resultCities: [],\r\n                openedCity: null\r\n            }\r\n        }\r\n        case CITY_ACTION.SET_OPENED_CITY: {\r\n            return {\r\n                ...state,\r\n                openedCity: action.payload\r\n            }\r\n        }\r\n        case CITY_ACTION.SET_TIP: {\r\n            return {\r\n                ...state,\r\n                tip: action.payload\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\n\r\nimport { appReducer } from \"./app/reducers\";\r\n\r\nexport default combineReducers({\r\n    app: appReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport { Provider } from 'react-redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport rootReducer from './store/reducers';\r\n\r\nimport './index.css';\r\n\r\nconst store = createStore(\r\n\trootReducer,\r\n\tcomposeWithDevTools(applyMiddleware(thunkMiddleware))\r\n);\r\n\r\nReactDOM.render(\r\n\t<Provider store={store}>\r\n\t\t<App />\r\n\t</Provider>, document.getElementById('root')\r\n);"],"sourceRoot":""}